alloy:
  configMap:
    create: true
    content: |
      // discovery.kubernetes permite descobrir targets de pods no cluster
      discovery.kubernetes "pod" {
        role = "pod"
      }

      // discovery.relabel reescreve o conjunto de labels dos targets
      discovery.relabel "pod_logs" {
        targets = discovery.kubernetes.pod.targets

        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          action        = "replace"
          target_label  = "namespace"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          action        = "replace"
          target_label  = "pod"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          action        = "replace"
          target_label  = "container"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
          action        = "replace"
          target_label  = "app"
        }

        rule {
          source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
          action        = "replace"
          target_label  = "job"
          separator     = "/"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          action        = "replace"
          target_label  = "__path__"
          separator     = "/"
          replacement   = "/var/log/pods/*$1/*.log"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_container_id"]
          action        = "replace"
          target_label  = "container_runtime"
          regex         = "^(\\S+):\\/\\/.+$"
          replacement   = "$1"
        }

        // adiciona label 'node' com o nome do host do n√≥
        rule {
          source_labels = ["__meta_kubernetes_pod_node_name"]
          action        = "replace"
          target_label  = "node"
        }
      }

      // leitura de logs de pods via API Kubernetes
      loki.source.kubernetes "pod_logs" {
        targets    = discovery.relabel.pod_logs.output
        forward_to = [loki.process.pod_logs.receiver]
      }

      // processamento dos logs de pods, adiciona label 'cluster'
      loki.process "pod_logs" {
        stage.static_labels {
          values = {
            cluster = "default",
          }
        }

        forward_to = [loki.write.default.receiver]
      }

      // coleta de eventos do Kubernetes
      loki.source.kubernetes_events "cluster_events" {
        job_name   = "integrations/kubernetes/eventhandler"
        log_format = "logfmt"
        forward_to = [loki.process.cluster_events.receiver]
      }

      // processamento de eventos do cluster
      loki.process "cluster_events" {
        forward_to = [loki.write.default.receiver]

        stage.static_labels {
          values = {
            cluster = "default",
          }
        }

        stage.labels {
          values = {
            kubernetes_cluster_events = "job",
          }
        }
      }

      // descoberta de logs do syslog local
      local.file_match "node_logs" {
        path_targets = [{
          __path__   = "/var/log/syslog",
          job        = "node/syslog",
          node_name  = sys.env("HOSTNAME"),
          cluster    = "default",
        }]
      }

      // leitura de arquivos de log locais
      loki.source.file "node_logs" {
        targets    = local.file_match.node_logs.targets
        forward_to = [loki.write.default.receiver]
      }

      // processamento dos logs do systemd, adiciona 'job' e 'node'
      loki.process "node_systemd" {
        stage.static_labels {
          values = {
            job = "node/systemd",
          }
        }

        stage.labels {
          values = {
            node = sys.env("HOSTNAME"),
          }
        }

        forward_to = [loki.write.default.receiver]
      }

      // escrita final para o endpoint do Loki
      loki.write "default" {
        endpoint {
          url     = "http://loki-gateway.loki.svc.cluster.local/loki/api/v1/push"
          headers = {
            "X-Scope-OrgID" = "foo",
          }
        }

        external_labels = {}
      }
